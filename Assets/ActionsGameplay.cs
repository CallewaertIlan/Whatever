//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/ActionsGameplay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionsGameplay: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionsGameplay()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionsGameplay"",
    ""maps"": [
        {
            ""name"": ""gameplay"",
            ""id"": ""686d4d6d-5ec7-4cff-bc76-13902c93cc26"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""24e61e2c-8043-4612-be19-6f9c40113547"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotate"",
                    ""type"": ""Value"",
                    ""id"": ""66dc0d8a-19a2-4952-8b82-de1461e75280"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""drag"",
                    ""type"": ""Button"",
                    ""id"": ""e3bba1ba-c16a-4504-bcc3-22272a95f01a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""left_hand"",
                    ""type"": ""Value"",
                    ""id"": ""c0c492ea-fa04-4fbc-be6b-0c93f62fbba1"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""left_hand_rotation"",
                    ""type"": ""Value"",
                    ""id"": ""4d0c4fd1-a1ff-437f-bed1-1d47d629a501"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""right_hand"",
                    ""type"": ""Value"",
                    ""id"": ""3e5cbef8-1ffe-4e2f-a2b9-265c4823eea0"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""right_hand_rotation"",
                    ""type"": ""Value"",
                    ""id"": ""3d4b901f-d7c3-4f0d-8675-2612a9dea8f5"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""left_hand_speed"",
                    ""type"": ""Value"",
                    ""id"": ""ebb774d9-a5f8-4763-9988-12d0c1929511"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b6f64b11-69cc-44aa-bf7a-4e619469144b"",
                    ""path"": ""<XRController>{LeftHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""70f5a343-2a42-488c-90b9-08eb8c143e8e"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b0bca10f-b19d-4f06-839b-9dacd3a35a69"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9ee412bd-78b1-4817-a65e-b954f00a5ee0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ada74ec2-4fae-46d5-8558-d2f4dd1d7bbf"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b1eb267d-f453-4b37-925c-1a474a479d37"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""564f0799-98bb-4125-8eec-5b7285c20f1f"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00930cf4-a492-4db8-8e3c-7cba8e8f0bb4"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""left_hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcc4c857-2e55-47f1-8851-681bf021da9d"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""right_hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc26539a-777a-4bf2-a16b-b8958f6824ab"",
                    ""path"": ""<XRController>{RightHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0384e52-4dd2-4536-97e0-2bfcd9953034"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""left_hand_rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2cc5470-d106-4634-b071-075e0c82a11d"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right_hand_rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf79c88a-f706-4e92-804f-bbed93bb2fe3"",
                    ""path"": ""<XRController>{RightHand}/deviceAcceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""left_hand_speed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Control"",
            ""bindingGroup"": ""Control"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // gameplay
        m_gameplay = asset.FindActionMap("gameplay", throwIfNotFound: true);
        m_gameplay_move = m_gameplay.FindAction("move", throwIfNotFound: true);
        m_gameplay_rotate = m_gameplay.FindAction("rotate", throwIfNotFound: true);
        m_gameplay_drag = m_gameplay.FindAction("drag", throwIfNotFound: true);
        m_gameplay_left_hand = m_gameplay.FindAction("left_hand", throwIfNotFound: true);
        m_gameplay_left_hand_rotation = m_gameplay.FindAction("left_hand_rotation", throwIfNotFound: true);
        m_gameplay_right_hand = m_gameplay.FindAction("right_hand", throwIfNotFound: true);
        m_gameplay_right_hand_rotation = m_gameplay.FindAction("right_hand_rotation", throwIfNotFound: true);
        m_gameplay_left_hand_speed = m_gameplay.FindAction("left_hand_speed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // gameplay
    private readonly InputActionMap m_gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_gameplay_move;
    private readonly InputAction m_gameplay_rotate;
    private readonly InputAction m_gameplay_drag;
    private readonly InputAction m_gameplay_left_hand;
    private readonly InputAction m_gameplay_left_hand_rotation;
    private readonly InputAction m_gameplay_right_hand;
    private readonly InputAction m_gameplay_right_hand_rotation;
    private readonly InputAction m_gameplay_left_hand_speed;
    public struct GameplayActions
    {
        private @ActionsGameplay m_Wrapper;
        public GameplayActions(@ActionsGameplay wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_gameplay_move;
        public InputAction @rotate => m_Wrapper.m_gameplay_rotate;
        public InputAction @drag => m_Wrapper.m_gameplay_drag;
        public InputAction @left_hand => m_Wrapper.m_gameplay_left_hand;
        public InputAction @left_hand_rotation => m_Wrapper.m_gameplay_left_hand_rotation;
        public InputAction @right_hand => m_Wrapper.m_gameplay_right_hand;
        public InputAction @right_hand_rotation => m_Wrapper.m_gameplay_right_hand_rotation;
        public InputAction @left_hand_speed => m_Wrapper.m_gameplay_left_hand_speed;
        public InputActionMap Get() { return m_Wrapper.m_gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @rotate.started += instance.OnRotate;
            @rotate.performed += instance.OnRotate;
            @rotate.canceled += instance.OnRotate;
            @drag.started += instance.OnDrag;
            @drag.performed += instance.OnDrag;
            @drag.canceled += instance.OnDrag;
            @left_hand.started += instance.OnLeft_hand;
            @left_hand.performed += instance.OnLeft_hand;
            @left_hand.canceled += instance.OnLeft_hand;
            @left_hand_rotation.started += instance.OnLeft_hand_rotation;
            @left_hand_rotation.performed += instance.OnLeft_hand_rotation;
            @left_hand_rotation.canceled += instance.OnLeft_hand_rotation;
            @right_hand.started += instance.OnRight_hand;
            @right_hand.performed += instance.OnRight_hand;
            @right_hand.canceled += instance.OnRight_hand;
            @right_hand_rotation.started += instance.OnRight_hand_rotation;
            @right_hand_rotation.performed += instance.OnRight_hand_rotation;
            @right_hand_rotation.canceled += instance.OnRight_hand_rotation;
            @left_hand_speed.started += instance.OnLeft_hand_speed;
            @left_hand_speed.performed += instance.OnLeft_hand_speed;
            @left_hand_speed.canceled += instance.OnLeft_hand_speed;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @rotate.started -= instance.OnRotate;
            @rotate.performed -= instance.OnRotate;
            @rotate.canceled -= instance.OnRotate;
            @drag.started -= instance.OnDrag;
            @drag.performed -= instance.OnDrag;
            @drag.canceled -= instance.OnDrag;
            @left_hand.started -= instance.OnLeft_hand;
            @left_hand.performed -= instance.OnLeft_hand;
            @left_hand.canceled -= instance.OnLeft_hand;
            @left_hand_rotation.started -= instance.OnLeft_hand_rotation;
            @left_hand_rotation.performed -= instance.OnLeft_hand_rotation;
            @left_hand_rotation.canceled -= instance.OnLeft_hand_rotation;
            @right_hand.started -= instance.OnRight_hand;
            @right_hand.performed -= instance.OnRight_hand;
            @right_hand.canceled -= instance.OnRight_hand;
            @right_hand_rotation.started -= instance.OnRight_hand_rotation;
            @right_hand_rotation.performed -= instance.OnRight_hand_rotation;
            @right_hand_rotation.canceled -= instance.OnRight_hand_rotation;
            @left_hand_speed.started -= instance.OnLeft_hand_speed;
            @left_hand_speed.performed -= instance.OnLeft_hand_speed;
            @left_hand_speed.canceled -= instance.OnLeft_hand_speed;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @gameplay => new GameplayActions(this);
    private int m_ControlSchemeIndex = -1;
    public InputControlScheme ControlScheme
    {
        get
        {
            if (m_ControlSchemeIndex == -1) m_ControlSchemeIndex = asset.FindControlSchemeIndex("Control");
            return asset.controlSchemes[m_ControlSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
        void OnLeft_hand(InputAction.CallbackContext context);
        void OnLeft_hand_rotation(InputAction.CallbackContext context);
        void OnRight_hand(InputAction.CallbackContext context);
        void OnRight_hand_rotation(InputAction.CallbackContext context);
        void OnLeft_hand_speed(InputAction.CallbackContext context);
    }
}
